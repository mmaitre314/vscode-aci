{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.38.33.27573",
      "templateHash": "13469694250966181603"
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Container instance name"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Resource location"
      }
    },
    "image": {
      "type": "string",
      "defaultValue": "mcr.microsoft.com/devcontainers/python:dev-3",
      "metadata": {
        "description": "Dev Container image name (see available images on [MCR](https://mcr.microsoft.com?search=devcontainers))"
      }
    },
    "gitRepoUrl": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "URL of Git repository to clone"
      }
    },
    "gitUserEmail": {
      "type": "string",
      "defaultValue": "[deployer().userPrincipalName]"
    },
    "gitUserName": {
      "type": "string",
      "defaultValue": "[split(deployer().userPrincipalName, '@')[0]]"
    },
    "vscodeExtensions": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "VSCode extensions to install (e.g. [\"ms-python.python\"], leave empty to skip)"
      }
    },
    "initCommand": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Command to run during container initialization (e.g. \"apt install git-all\", leave empty to skip)"
      }
    },
    "cpuCores": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Number of CPU cores"
      }
    },
    "memoryInGB": {
      "type": "int",
      "defaultValue": 6,
      "metadata": {
        "description": "Memory in GB"
      }
    },
    "autoShutdown": {
      "type": "string",
      "defaultValue": "3d",
      "metadata": {
        "description": "Auto-shutdown after this duration (e.g. 4h, 1d, infinity)"
      }
    },
    "sharedName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Name of resources shared by container instances (Managed Identity, Log Analytics, network, etc.)"
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "vscodeExtensionArgs",
        "count": "[length(parameters('vscodeExtensions'))]",
        "input": "[format('--install-extension {0}', parameters('vscodeExtensions')[copyIndex('vscodeExtensionArgs')])]"
      }
    ],
    "gcmVersion": "2.6.1",
    "assertNameIsNotEmpty": "[div(1, if(less(length(parameters('name')), 3), 0, 1))]",
    "gitCommandTemplate": "[replace(replace(replace(replace('  (\n    curl -sSL https://github.com/git-ecosystem/git-credential-manager/releases/download/v{{gcmVersion}}/gcm-linux_amd64.{{gcmVersion}}.tar.gz --output /tmp/gcm-linux_amd64.tar.gz\n    tar -xzf /tmp/gcm-linux_amd64.tar.gz -C /usr/local/bin\n    git-credential-manager configure\n    git config --global user.name \"{{gitUserName}}\"\n    git config --global user.email \"{{gitUserEmail}}\"\n    git clone --filter=tree:0 --single-branch {{gitRepoUrl}} /root\n  )&\n  ', '{{gcmVersion}}', variables('gcmVersion')), '{{gitRepoUrl}}', parameters('gitRepoUrl')), '{{gitUserEmail}}', parameters('gitUserEmail')), '{{gitUserName}}', parameters('gitUserName'))]",
    "vsCodeCommandTemplate": "[replace(replace('  (\n    curl -sSL \"https://code.visualstudio.com/sha/download?build=stable&os=cli-alpine-x64\" --output /tmp/vscode-cli.tar.gz\n    tar -xzf /tmp/vscode-cli.tar.gz -C /usr/local/bin\n    code tunnel user login --provider microsoft\n    code tunnel --accept-server-license-terms --name {{name}} {{vscodeExtensionArgs}}\n  )&\n  ', '{{vscodeExtensionArgs}}', join(variables('vscodeExtensionArgs'), ' ')), '{{name}}', parameters('name'))]",
    "command": "[replace(replace(replace(replace(replace('  set -euxo pipefail\n  exec &> >(tee /root/vscode-aci.log)\n  {{initCommand}}\n  {{gitCommandTemplate}}\n  {{vsCodeCommandTemplate}}\n  cd /root\n  sleep {{autoShutdown}}\n  ', '{{initCommand}}', parameters('initCommand')), '{{gitCommandTemplate}}', if(equals(parameters('gitRepoUrl'), ''), '', variables('gitCommandTemplate'))), '{{vsCodeCommandTemplate}}', variables('vsCodeCommandTemplate')), '{{autoShutdown}}', parameters('autoShutdown')), '\r', '')]"
  },
  "resources": [
    {
      "type": "Microsoft.ContainerInstance/containerGroups",
      "apiVersion": "2024-11-01-preview",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('sharedName')))]": {}
        }
      },
      "properties": {
        "containers": [
          {
            "name": "default",
            "properties": {
              "image": "[parameters('image')]",
              "resources": {
                "requests": {
                  "cpu": "[parameters('cpuCores')]",
                  "memoryInGB": "[parameters('memoryInGB')]"
                }
              },
              "environmentVariables": [
                {
                  "name": "GCM_CREDENTIAL_STORE",
                  "value": "cache"
                },
                {
                  "name": "GCM_AZREPOS_CREDENTIALTYPE",
                  "value": "oauth"
                },
                {
                  "name": "GCM_AZREPOS_MANAGEDIDENTITY",
                  "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('sharedName')), '2025-01-31-preview').clientId]"
                },
                {
                  "name": "DOTNET_SYSTEM_GLOBALIZATION_INVARIANT",
                  "value": "1"
                }
              ],
              "command": [
                "/bin/bash",
                "-c",
                "[variables('command')]"
              ]
            }
          }
        ],
        "osType": "Linux",
        "restartPolicy": "Never",
        "subnetIds": [
          {
            "id": "[format('{0}/subnets/aci', resourceId('Microsoft.Network/virtualNetworks', parameters('sharedName')))]"
          }
        ],
        "diagnostics": {
          "logAnalytics": {
            "logType": "ContainerInstanceLogs",
            "workspaceId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('sharedName')), '2025-02-01').customerId]",
            "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('sharedName'))]",
            "workspaceKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', parameters('sharedName')), '2025-02-01').primarySharedKey]"
          }
        }
      }
    }
  ],
  "outputs": {
    "inputValidations": {
      "type": "array",
      "value": [
        "[variables('assertNameIsNotEmpty')]"
      ]
    }
  }
}